site_name: listless ðŸ’¤
theme:
  name: material
  logo: assets/fatigue-light.svg
  favicon: assets/fatigue-dark.svg
  font:
    text: "Briskpace"
    code: "Roboto Mono Medium"
  features:
    - content.code.copy
    - content.code.annotate
    - content.tooltips
  # Setup for theme switch https://squidfunk.github.io/mkdocs-material/setup/changing-the-colors/#color-palette-toggle
  palette:
    # Palette toggle for light mode
    - scheme: default
      primary: white
      toggle:
        icon: material/toggle-switch
        name: Switch to dark mode
    # Palette toggle for dark mode
    - scheme: slate
      primary: black
      toggle:
        icon: material/toggle-switch-off-outline
        name: Switch to light mode
plugins:
  - glightbox
  - placeholder:
      placeholder_file: placeholder-plugin.yaml

markdown_extensions:
  - pymdownx.superfences
  - pymdownx.tabbed:
      alternate_style: true
  - pymdownx.arithmatex:
      generic: true
  - pymdownx.highlight:
      anchor_linenums: true
      line_spans: __span
      pygments_lang_class: true
  - pymdownx.inlinehilite
  - pymdownx.snippets
  - admonition
  - pymdownx.details
  - pymdownx.critic
  - pymdownx.caret
  - pymdownx.keys
  - pymdownx.mark
  - pymdownx.tilde
  - attr_list
  - md_in_html
  - pymdownx.emoji:
      emoji_index: !!python/name:material.extensions.emoji.twemoji
      emoji_generator: !!python/name:material.extensions.emoji.to_svg
  - abbr
  - attr_list
  - footnotes
  - pymdownx.tasklist:
      custom_checkbox: true
      clickable_checkbox: true

extra_javascript:
  - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js

extra_css:
  - assets/extra.css

nav:
  - About: "index.md"
  - Blog:
      - Books:
          - Ghost Radio: "blog/books/ghost-radio.md"
          - The Institute: "blog/books/the-institute.md"
          - The Reaping: "blog/books/the-reaping.md"
          - The Hobbit: "blog/books/the-hobbit.md"
  - Maths:
      - Algebra:
          - Numbers: "maths/algebra/numbers.md"
          - Proof âˆš2 is irrational: "maths/algebra/sqrt-2-irrational.md"
          - Laws of arithmetics: "maths/algebra/arithmetic-laws.md"
          - Exponent and logarithmic identities: "maths/algebra/exponent-and-logarithmic-identities.md"
          - Changing base: "maths/algebra/base-change.md"
          - Algebraic expressions: "maths/algebra/expressions.md"
          - Modular arithmetic: "maths/algebra/modulo.md"
          - Complex numbers: "maths/algebra/complex.md"
      - Combinatorics:
          - Sets: "maths/combinatorics/sets.md"
          - Permutation and Combination: "maths/combinatorics/p-and-c.md"
          - Probability: "maths/combinatorics/probability.md"
      - Series: "maths/series.md"
  - Algorithms:
      - Binary Search: "algorithms/search/binary.md"
      - Partitioning: "algorithms/partition/partition.md"
      - Sorting:
          - Comparison Sorts: "algorithms/sort/comparison.md"
          - Bubble sort: "algorithms/sort/bubble-sort.md"
          - Insertion sort: "algorithms/sort/insertion-sort.md"
          - Selection sort: "algorithms/sort/selection-sort.md"
          - Heapsort: "algorithms/sort/heapsort.md"
          - Quicksort: "algorithms/sort/quicksort.md"
          - Merge Sort: "algorithms/sort/mergesort.md"
          - Counting Sort: "algorithms/sort/counting-sort.md"
      - Divide & Conquer:
          - The Master Method: "algorithms/divide-and-conquer/master-method.md"
      - Dynamic Programming:
          - Intro: "algorithms/dynamic-programming/intro.md"
          - Rod cutting: "algorithms/dynamic-programming/rod-cutting.md"
          - Longest common subsequence: "algorithms/dynamic-programming/longest-common-subsequence.md"
          - Longest common substring: "algorithms/dynamic-programming/longest-common-substring.md"
          - Longest palindromic subsequence: "algorithms/dynamic-programming/longest-palindromic-subsequence.md"
  - Data Structures:
      - Numbers:
          - Representation: "data-structures/numbers/representation.md"
          - Bit tricks: "data-structures/numbers/bit-tricks.md"
          - Addition Subtraction: "data-structures/numbers/addition.md"
      - Linked List:
          - Singly Linked List: "data-structures/linked-list/singly-linked-list.md"
          - Doubly Linked List: "data-structures/linked-list/doubly-linked-list.md"
          - Common Patterns: "data-structures/linked-list/patterns.md"
      - Array:
          - Problems:
              - "The Dutch National Flag Problem": "data-structures/array/problems/dutch-national-flag.md"
      - Stack:
          - Basics: "data-structures/stack/basics.md"
      - Heap: "data-structures/heap/index.md"
      - Disjoint Set: "data-structures/disjoint-set/index.md"
      - Circular list: "data-structures/circular-list.md"
      - Tree:
          - Traversal:
              - DFS:
                  - Inorder: "data-structures/tree/traversal/inorder-tree-traversal.md"
                  - Preorder: "data-structures/tree/traversal/preorder-tree-traversal.md"
                  - Postorder: "data-structures/tree/traversal/postorder-tree-traversal.md"
              - BFS / level-order: "data-structures/tree/traversal/level-traversal.md"
      - Graph:
          - Intro: "data-structures/graph/intro.md"
          - Traversal:
              - Generic Search: "data-structures/graph/generic-search.md"
              - BFS: "data-structures/graph/bfs.md"
              - DFS: "data-structures/graph/dfs.md"
          - Topological Sort: "data-structures/graph/topological-sort.md"
  - Practice:
      - Learnings: "practice/index.md"
      - Greedy:
          - Activity selection: "practice/greedy/activity-selection.md"
      - Backtracking:
          - List all binary strings generated from wildcard pattern: "practice/backtracking/list-all-binary-strings-generated-from-wildcard-pattern.md"
      - Stack:
          - Check if a given expression is balanced or not: "practice/stack/check-if-a-given-expression-is-balanced-or-not.md"
          - Convert infix expression to postfix: "practice/stack/convert-infix-expression-to-postfix.md"
          - Decode increment decrement sequence: "practice/stack/decode-increment-decrement-sequence.md"
          - Design a stack that supports peeking minimum element: "practice/stack/design-a-stack-that-supports-peeking-minimum-element.md"
          - Evaluate postfix expression: "practice/stack/evaluate-postfix-expression.md"
          - Find duplicate parenthesis in an expression: "practice/stack/find-duplicate-parenthesis-in-an-expression.md"
          - Inorder tree traversal: "practice/stack/inorder-tree-traversal.md"
          - Postorder tree traversal: "practice/stack/postorder-tree-traversal.md"
          - Preorder tree traversal: "practice/stack/preorder-tree-traversal.md"
      - Bits:
          - Find the only non-duplicate number in an array: "practice/bits/find-the-only-non-duplicate.md"
          - Count the number of set bits: "practice/bits/count-the-number-of-set-bits.md"
          - Computing the parity of a word: "practice/bits/compute-parity.md"
          - Swap bits: "practice/bits/swap-bits.md"
          - Closest integer with same number of set bits: "practice/bits/closest-integer-with-same-bit-count.md"
          - Add two integers without arithmetic operators: "practice/bits/add-two-integers-without-arithmetic-operator.md"
          - Multiply two integers without arithmetic operators: "practice/bits/multiply-two-integers-without-arithmetic-operator.md"
          - Divide two integers without arithmetic operators: "practice/bits/divide-two-integers-without-arithmetic-operator.md"
          - Calculate exponent of an integer: "practice/bits/calculate-exponent-of-an-integer.md"
          - Rotate an integer: "practice/bits/rotate-an-integer.md"
          - Generate random numbers: "practice/bits/random-number-generation.md"
      - Linked List:
          - Check if the content of a linked list is a palindrome: "practice/linked-list/check-if-the-content-of-a-linked-list-is-a-palindrome.md"
          - Check if two given linked lists are identical: "practice/linked-list/check-if-two-given-linked-lists-are-identical.md"
          - Create a queue from a linked list: "practice/linked-list/create-a-queue-from-a-linked-list.md"
          - Create a stack from a linked list: "practice/linked-list/create-a-stack-from-a-linked-list.md"
          - Deep copy a linked list: "practice/linked-list/deep-copy-a-linked-list.md"
          - Detect cycle in a linked list: "practice/linked-list/detect-cycle-in-a-linked-list.md"
          - Get kth node from either end: "practice/linked-list/get-kth-node-from-either-end.md"
          - In-place merge two sorted linked list: "practice/linked-list/in-place-merge-two-sorted-linked-list.md"
          - In-place merge arbitrary number of sorted linked list: "practice/linked-list/in-place-merge-arbitrary-number-of-sorted-linked-list.md"
          - In-place sort a linked list: "practice/linked-list/in-place-sort-a-linked-list.md"
          - Insert a node in its correct place in a sorted linked list: "practice/linked-list/insert-a-node-in-its-correct-place-in-a-sorted-linked-list.md"
          - Intersection of two sorted linked list: "practice/linked-list/intersection-of-two-sorted-linked-list.md"
          - Intersection of two linked lists: "practice/linked-list/intersection-of-linked-lists.md"
          - Remove duplicates from sorted linked list: "practice/linked-list/remove-duplicates-from-sorted-linked-list.md"
          - Reverse a linked list in-place: "practice/linked-list/reverse-a-linked-list-in-place.md"
          - Reverse every group of k nodes: "practice/linked-list/reverse-every-group-of-k-nodes.md"
          - Split linked list in first and second halves: "practice/linked-list/split-linked-list-in-first-and-second-halves.md"
          - Turn a linked list Iterable: "practice/linked-list/turn-a-linked-list-iterable.md"
      - Sorting:
          - Merge overlapping intervals: "practice/sorting/merge-overlapping-intervals.md"
      - String:
          - Longest Common Prefix: "practice/string/longest-common-prefix.md"
      - Miscellaneous:
          - Generate Specified Row of Pascal's Triangle: "practice/misc/generate-pascals-triangle-row.md"
  - Design Patterns:
      - Creational:
          - Singleton: "design-patterns/singleton.md"
          - Builder: "design-patterns/builder.md"
  - Concurrency:
      - Intro: "concurrency/intro.md"
  - Java:
      - Collections: "java/collections-framework.md"
      - Iterators: "java/iterators.md"
  - Kotlin:
      - Concurrency: "kt/concurrency.md"
  - Go:
      - Tour: "go/structure.md"
      - Constants: "go/constants.md"
      - Basic Types: "go/basic-types.md"
      - Aggregate Types: "go/aggregate-types.md"
      - Reference Types:
          - Pointers, Slices and, Map: "go/reference-types.md"
          - Interfaces: "go/interfaces.md"
          - Functions: "go/functions.md"
      - Generics: "go/generics.md"
  - Android:
      - Activities: "android/activities.md"
      - Tasks: "android/tasks.md"
      - Fragments: "android/fragments.md"
      - Animations: "android/animation-transition.md"
  - Javascript:
      - Objects:
          - Basics: "js/objects/basics.md"
          - Prototype: "js/objects/prototype.md"
          - this: "js/objects/this.md"
  - CSS:
      - Box Model: "css/box-model.md"
      - em, rem, and more: "css/relative-units.md"
  - Python:
      - Basics: "python/basics.md"
      - Operators: "python/operators.md"
      - Structure: "python/structure.md"
      - Objects: "python/objects.md"
      - Functions: "python/functions.md"
      - Generators: "python/generators.md"
      - Object Oriented Programming: "python/oop.md"
  - Ubuntu:
      - Static IP: "ubuntu/static-ip.md"
      - NTFS mount: "ubuntu/ntfs-mount.md"
      - Transmission: "ubuntu/transmission.md"
      - Samba: "ubuntu/samba.md"
  - How To:
      - Use 3p ink with Brother printer: "howto/printer-3p-ink.md"
  - Miscellaneous:
      - Display Upgrade: "misc/display.md"
      - yt-dlp: "misc/yt-dlp.md"
